Description: >
  Udacity's Cloud Devops Infrastructure As Code Project - Network configuration

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource name
    Type: String

  InstanceType:
    Description: Project Udagram EC2 instance type
    Type: String
    Default: t2.medium
    ConstraintDescription: must be a valid EC2 instance type.

  S3Bucket:
    Description: The bucket where the app archive will be downloaded
    Type: String

Resources:

  S3BucketRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole

  ProjectUdagramInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref 'S3BucketRole']

  ReadOnlyS3BucketsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: s3bucket-zipfile-download
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource:
          - !Sub 'arn:aws:s3:::${S3Bucket}/*'
      Roles:
      - !Ref 'S3BucketRole'

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  ProjectUdagramLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash
            apt-get update -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            echo "Udacity Demo Web Server Up and Running!" > index.html
            aws s3 cp s3://${S3Bucket}/udacity.zip .
            unzip -o udacity.zip
      ImageId: ami-09d56f8956ab235b3
      SecurityGroups: [!Ref 'WebServerSecGroup']
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'ProjectUdagramInstanceProfile'
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeSize: '10'

  UdagramGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PRIVATE-NETS"
      LaunchConfigurationName: 
        Ref: ProjectUdagramLaunchConfig
      MinSize: '4'
      MaxSize: '8'
      TargetGroupARNs: [!Ref 'UdagramTargetGroup']

  UdagramScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'UdagramGroup'
      Cooldown: '60'
      ScalingAdjustment: 1
  
  UdagramScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'UdagramGroup'
      Cooldown: '60'
      ScalingAdjustment: -1
    
  UdagramTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

  UdagramLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC2-SN"
      SecurityGroups: [!Ref 'LBSecGroup']

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'UdagramTargetGroup'
      LoadBalancerArn: !Ref 'UdagramLB'
      Port: '80'
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'UdagramTargetGroup'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'Listener'
      Priority: 1

Outputs:  
  UdagramUrl:
    Description: Public URL of Load Balancer and Udagram webserver
    Value: !Join ['', ['http://', !GetAtt [UdagramLB, DNSName]]]
    Export:
        Name: !Sub "${EnvironmentName}-UdagramURL"         
